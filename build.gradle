apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion SysConfig.compileSdkVersion

    defaultConfig {
        minSdkVersion SysConfig.minSdkVersion
        targetSdkVersion SysConfig.targetSdkVersion
        versionCode 1
        versionName "1.0"

        consumerProguardFiles "consumer-rules.pro"

        checkMVVMConfigProperty(mvvmConfig.include.retrofit2RxJava2)
        manifestPlaceholders = [
                "isRetrofitUseRx": mvvmConfig.include.retrofit2RxJava2
        ]
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "${JavaVersion.VERSION_1_8}"
    }

    sourceSets {
        main {
            java {
                /*
                 TODO 这里似乎无法根据配置来排除某些类，而是取决于是否使用了某类来自动排除
                 */
            }
        }
    }
}

/**
 * TODO
 * 根据配置文件，决定是否引入某些库。
 * 如果框架中有用到某库，那么在排除该库的时候需要 compileOnly，以便编译通过，比如 room
 * kapt 可能需要单独在 module 中声明
 */
dependencies {
    api fileTree(dir: "libs", include: ["*.jar"])
    // 必备的 4 个库
    api Deps.kotlinStdLib
    api Deps.kotlinKTX
    api Deps.appcompat
    api Deps.constraintLayout
    api Deps.slidingPaneLayout

    api Deps.activity
    api Deps.activityKTX
    api Deps.fragment

    /**
     * 在 Lifecycles 中使用协程，视图销毁则自动取消
     */
    api Deps.lifecycleRuntimeKTX
    /**
     * 在 LiveData 中使用协程
     */
    api Deps.lifecycleLiveDataKTX
    /**
     * 简化 Fragment 的 API 调用，同时通过 viewModels 扩展方法创建 vm 来的非常容易
     */
    api Deps.fragmentKTX
    /**
     * 在 vm 中使用协程，视图销毁自动取消
     */
    api Deps.viewModelKTX
    /**
     * 生成生命周期注解相关的代码，否则将反射调用，影响性能
     */
    api Deps.lifecycleJava8

    /**
     * 监控应用的生命周期
     */
    checkMVVMConfigProperty(mvvmConfig.include.lifecycleProcess)
    if (mvvmConfig.include.lifecycleProcess) {
        api Deps.lifecycleProcess
    } else {
        compileOnly Deps.lifecycleProcess
    }

    checkMVVMConfigProperty(mvvmConfig.include.loadSir)
    if (mvvmConfig.include.loadSir) {
        api Deps.loadSir
    } else {
        compileOnly Deps.loadSir
    }

    // RecyclerView
    checkMVVMConfigProperty(mvvmConfig.include.recyclerView)
    if (mvvmConfig.include.recyclerView) {
        api Deps.recyclerView
    } else {
        compileOnly Deps.recyclerView
    }
    // 数据库
    checkMVVMConfigProperty(mvvmConfig.include.room)
    if (mvvmConfig.include.room) {
        api Deps.roomRuntime
        kapt Deps.roomCompiler
    } else {
        compileOnly Deps.roomRuntime
    }
    // 下拉刷新
    checkMVVMConfigProperty(mvvmConfig.include.swipeRefreshLayout)
    if (mvvmConfig.include.swipeRefreshLayout) {
        api Deps.swipeRefreshLayout
    } else {
        compileOnly Deps.swipeRefreshLayout
    }
    // 网络
    checkMVVMConfigProperty(mvvmConfig.include.retrofit2)
    if (mvvmConfig.include.retrofit2) {
        api Deps.retrofit2
        api Deps.gson
        api Deps.gsonConverter
    } else {
        compileOnly Deps.retrofit2
        compileOnly Deps.gsonConverter
    }

    // 图片
    checkMVVMConfigProperty(mvvmConfig.include.glide)
    if (mvvmConfig.include.glide) {
        api Deps.glide
        kapt Deps.glideCompiler
    } else {
        compileOnly Deps.glide
    }
    // 权限申请
    checkMVVMConfigProperty(mvvmConfig.include.livePermissions)
    if (mvvmConfig.include.livePermissions) {
        api Deps.livePermissions
    } else {
        compileOnly Deps.livePermissions
    }

    // rx 系列
    checkMVVMConfigProperty(mvvmConfig.include.rxKotlin)
    checkMVVMConfigProperty(mvvmConfig.include.rxJava2)
    if (mvvmConfig.include.rxJava2 || mvvmConfig.include.rxKotlin) {
        api Deps.rxAndroid2
        if (mvvmConfig.include.rxKotlin) {
            api Deps.rxKotlin
        }
        if (mvvmConfig.include.rxJava2) {
            api Deps.rxJava2
        }
    }
    checkMVVMConfigProperty(mvvmConfig.include.roomRxJava)
    if (mvvmConfig.include.roomRxJava) {
        api Deps.roomRxJava
    }
    checkMVVMConfigProperty(mvvmConfig.include.retrofit2RxJava2)
    if (mvvmConfig.include.retrofit2RxJava2) {
        api Deps.rxAndroid2
        api Deps.retrofit2RxJava2
    } else {
        if (mvvmConfig.include.roomRxJava || mvvmConfig.include.rxJava2 || mvvmConfig.include.rxKotlin) {
            compileOnly(Deps.retrofit2RxJava2) {
                exclude group: 'io.reactivex.rxjava2'
                exclude group: 'org.reactivestreams'
            }
        } else {
            compileOnly Deps.retrofit2RxJava2
        }
    }

    /**
     * debug 阶段内存泄露检测
     */
    checkMVVMConfigProperty(mvvmConfig.include.leakCanary2)
    if (mvvmConfig.include.leakCanary2) {
        debugImplementation Deps.leakCanary2
    }
}